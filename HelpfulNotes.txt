Notes on Rules and Rules.txt file:
	* se1 and se2 will run infinitely and are only included for completeness. They seem to be more theoretical in nature.  The indented text is from the w3c official website explaining why they should only be used in a modified state.  Note that no spelling has been changed.

		"It is easy to see that S is an instance of E if and only if one can derive E from S by applying these rules in a suitable sequence; the rule applications required can be discovered by examination of the instance mapping. So, by the interpolation lemma, S simply entails E iff one can derive (a graph containing) E from S by the application of these rules. However, it is also clear that applying these rules naively would not result in an efficient search process, since the rules will not terminate and can produce arbitrarily many redundant derivations of equivalent triples.
		
		The general problem of determining simple entailment between arbitrary RDF graphs is decideable but NP-complete. This can be shown by encoding the problem of detecting a subgraph of an arbitrary directed graph as an RDF entailment, using only blank nodes to represent the graph (observation due to Jeremy Carroll.)
		
		Subsequent rule sets for detecting RDF and RDFS entailment use a special case of rule se1 which applies only to literals:"
	
	* lg rule is commented out because it is more effective to combine it with applicable rules. If it is desired to only use rule lg then rules rdf2 and rdfs1 should be commented out to ensure that no more than one blank node is allocated to each literal.

 	* rdf2 does not actually check if the literal follows XML syntax but instead it checks to see if it claims to be.  Literals that will cause this rule to fire will have the parsetype: "Literal" in the ontology but may or may not be well-typed XML.  This create the possibility for an XML clash but doesn't mean that RDFS entailed graph is invalid. If XML checking is needed, custom builtins would probably be best approach.